[{"/home/projects/homie/drycat/ui/settings/src/pages/main/index.tsx":"1","/home/projects/homie/drycat/ui/settings/src/index.tsx":"2","/home/projects/homie/drycat/ui/settings/src/components/tab-menu/index.tsx":"3","/home/projects/homie/drycat/ui/settings/src/components/theme-settings/index.tsx":"4","/home/projects/homie/drycat/ui/settings/src/components/global-settings/index.tsx":"5","/home/projects/homie/drycat/ui/settings/src/components/theme-settings/random.tsx":"6","/home/projects/homie/drycat/ui/settings/src/components/theme-settings/folder.tsx":"7","/home/projects/homie/drycat/ui/settings/src/components/side-menu/index.tsx":"8"},{"size":644,"mtime":1608719041984,"results":"9","hashOfConfig":"10"},{"size":226,"mtime":1607702259681,"results":"11","hashOfConfig":"10"},{"size":1064,"mtime":1608283903115,"results":"12","hashOfConfig":"10"},{"size":636,"mtime":1608718994213,"results":"13","hashOfConfig":"10"},{"size":269,"mtime":1608719031589,"results":"14","hashOfConfig":"10"},{"size":6215,"mtime":1608718901071,"results":"15","hashOfConfig":"10"},{"size":1090,"mtime":1608297533541,"results":"16","hashOfConfig":"10"},{"size":2749,"mtime":1608733979018,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1ry7o4a",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/projects/homie/drycat/ui/settings/src/pages/main/index.tsx",["37","38","39"],"/home/projects/homie/drycat/ui/settings/src/index.tsx",[],["40","41"],"/home/projects/homie/drycat/ui/settings/src/components/tab-menu/index.tsx",[],"/home/projects/homie/drycat/ui/settings/src/components/theme-settings/index.tsx",[],"/home/projects/homie/drycat/ui/settings/src/components/global-settings/index.tsx",[],"/home/projects/homie/drycat/ui/settings/src/components/theme-settings/random.tsx",["42","43","44","45","46","47","48","49"],"import { FormControl, FormGroup, FormLabel, FormControlLabel, Switch, TableContainer, Table, TableRow, TableHead, TableCell, TableBody, Paper, Checkbox, TextField, Input, ButtonGroup, Button, Container, FormHelperText, Box, Tooltip } from '@material-ui/core';\nimport { useState } from 'react';\nimport gStyles from 'global.module.scss';\nimport styles from './styles.module.scss';\n\nconst columns = [\n  { field: 'name', header: 'Theme Name' },\n  { field: 'wiehgt', header: 'Weight', type: 'number' },\n]\n\nconst data: { name: string, weight: number, choosed?: boolean, error?: string }[] = [\n  { name: \"default\", weight: 100 },\n  { name: \"dryCat\", weight: 50 },\n  { name: \"notChoosed\", weight: 0 },\n  { name: \"heck\", weight: 1 },\n];\n\nenum TOGGLE_ALL_STATUS {\n  EMPTY,\n  HALF,\n  CHECKED,\n}\n\nfunction RandomThemes() {\n\n  const [rows, setRows] = useState([...data]);\n  const [weight, setWeight] = useState(0);\n  const [weightError, setWeightError] = useState<string | undefined>();\n  const [toggleAllStatus, setToggleAllStatus] = useState(TOGGLE_ALL_STATUS.EMPTY);\n  const toggleAll = (checked: boolean) => {\n    for (let i = 0; i < data.length; i++) {\n      data[i].choosed = checked;\n    }\n    if (checked) setToggleAllStatus(TOGGLE_ALL_STATUS.CHECKED);\n    else setToggleAllStatus(TOGGLE_ALL_STATUS.EMPTY);\n    setRows([...data]);\n  }\n\n  const toggleOne = (i: number, checked: boolean) => {\n    data[i].choosed = checked;\n    const choosedCount = data.reduce<number>((count, { choosed }) => choosed === true ? count + 1 : count, 0);\n    if (choosedCount === 0) setToggleAllStatus(TOGGLE_ALL_STATUS.EMPTY);\n    else if (choosedCount === data.length) setToggleAllStatus(TOGGLE_ALL_STATUS.CHECKED);\n    else setToggleAllStatus(TOGGLE_ALL_STATUS.HALF);\n    setRows([...data]);\n  }\n\n  const setWeightToChoosed = () => {\n    console.log('newWeight', weight)\n    for (const theme of data) {\n      if (theme.choosed) theme.weight = weight;\n    }\n    console.log(data);\n    setRows([...data]);\n  }\n\n  const setErrorFor = (i: number, error?: string) => {\n    data[i].error = error;\n    setRows([...data]);\n  }\n\n  const changeWeight = (i: number, newWeight: number) => {\n    data[i].weight = newWeight;\n    data[i].error = undefined;\n    setRows([...data]);\n  }\n\n  const [status, setStatus] = useState(true);\n  const [error] = useState();\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    console.log(event);\n  };\n\n  return (\n    <div className={styles.random}>\n      <FormLabel component=\"legend\">Themes random</FormLabel>\n      <FormControl component=\"fieldset\" margin=\"normal\">\n        <FormGroup>\n          <FormControlLabel\n            control={<Switch color=\"primary\" />}\n            label=\"Enabled\"\n          // labelPlacement=\"start\"\n          />\n        </FormGroup>\n      </FormControl>\n      <Box className={styles.tableContainer}>\n        <TableContainer component={Paper} className={styles.table}>\n          <Table size=\"small\" aria-label=\"a dense table\" >\n            <TableHead>\n              <TableRow>\n                <TableCell align=\"left\" className={styles.checkbox}>\n                  <Checkbox\n                    color=\"primary\"\n                    onChange={(_, checked) => toggleAll(checked)}\n                    indeterminate={toggleAllStatus === TOGGLE_ALL_STATUS.HALF}\n                    checked={toggleAllStatus === TOGGLE_ALL_STATUS.CHECKED ? true : false}\n                  />\n                </TableCell>\n                <TableCell align=\"left\">Name</TableCell>\n                <TableCell size=\"small\" align=\"left\">Weight</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map(({ name, weight, choosed, error }, i) => (\n                <TableRow key={`table_row_${i}`}>\n                  <TableCell align=\"left\" className={styles.checkbox}>\n                    <Checkbox\n                      color=\"primary\"\n                      checked={!!choosed}\n                      onChange={(_, checked) => toggleOne(i, checked)}\n                    />\n                  </TableCell>\n                  <TableCell align=\"left\">{name}</TableCell>\n                  <TableCell size=\"small\" align=\"left\">\n                    <Tooltip open={!!error} title={error || ''}>\n                      <Input\n                        value={weight}\n                        error={!!error}\n                        onChange={({ target: { value } }) => {\n                          const newValue = Number(value);\n                          if (Number.isNaN(newValue)) setErrorFor(i, 'Only numbers allowed')\n                          else changeWeight(i, Number(value));\n                        }}\n                        color=\"primary\"\n                        inputProps={error ? { onBlur: () => setErrorFor(i) } : {}}\n                      // disableUnderline={true}\n                      // onChange={(e) => changeWeight(i, e)}\n                      />\n                    </Tooltip>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <FormControl variant=\"filled\">\n          <TextField\n            // defaultValue={path}\n            // onChange={handleChange}\n            error={!!weightError}\n            onChange={({ target: { value } }) => {\n              const newValue = Number(value);\n              if (Number.isNaN(newValue)) setWeightError('Only numbers allowed');\n              else setWeight(newValue);\n            }}\n            variant=\"filled\"\n            margin=\"normal\"\n            size=\"small\"\n            value={weight}\n            InputProps={{\n              onBlur: () => { if (weightError) setWeightError(undefined); },\n              endAdornment: <Button\n                disabled={(weightError !== undefined || toggleAllStatus === TOGGLE_ALL_STATUS.EMPTY)}\n                onClick={setWeightToChoosed}\n                size=\"small\"\n                variant=\"contained\"\n              >Set</Button>\n            }} />\n          <FormHelperText error={!!weightError}>Set entered integer (weight) to all choosed themes</FormHelperText>\n        </FormControl>\n      </Box>\n    </div>\n  );\n}\n\nexport default RandomThemes;\n","/home/projects/homie/drycat/ui/settings/src/components/theme-settings/folder.tsx",["50","51","52","53"],"import { useState } from 'react';\nimport { FormLabel, ButtonGroup, FormHelperText, Input, Button, FormControl, InputLabel, TextField, InputBase } from '@material-ui/core';\n\nfunction FolderPath() {\n  const [path] = useState('/home/demid/shit/');\n  const [error] = useState();\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    console.log(event);\n  };\n  console.log('render');\n  return (\n    <div>\n      <FormControl variant=\"filled\" fullWidth>\n        <FormLabel component=\"legend\">Themes folder path</FormLabel>\n        <TextField\n          defaultValue={path}\n          // onChange={handleChange}\n          variant=\"filled\"\n          margin=\"normal\"\n          size=\"small\"\n          InputProps={{\n            endAdornment: (<ButtonGroup size=\"small\" variant=\"contained\">\n              <Button>Parse</Button>\n              <Button>Change</Button>\n            </ButtonGroup>\n            )\n          }} />\n        {error ? <FormHelperText id=\"component-error-text\">{error}</FormHelperText> : null}\n      </FormControl>\n    </div>\n  );\n}\n\nexport default FolderPath;\n","/home/projects/homie/drycat/ui/settings/src/components/side-menu/index.tsx",["54","55"],{"ruleId":"56","severity":1,"message":"57","line":1,"column":8,"nodeType":"58","messageId":"59","endLine":1,"endColumn":15},{"ruleId":"56","severity":1,"message":"60","line":2,"column":8,"nodeType":"58","messageId":"59","endLine":2,"endColumn":21},{"ruleId":"56","severity":1,"message":"61","line":3,"column":8,"nodeType":"58","messageId":"59","endLine":3,"endColumn":22},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"56","severity":1,"message":"66","line":1,"column":172,"nodeType":"58","messageId":"59","endLine":1,"endColumn":183},{"ruleId":"56","severity":1,"message":"67","line":1,"column":193,"nodeType":"58","messageId":"59","endLine":1,"endColumn":202},{"ruleId":"56","severity":1,"message":"68","line":3,"column":8,"nodeType":"58","messageId":"59","endLine":3,"endColumn":15},{"ruleId":"56","severity":1,"message":"69","line":6,"column":7,"nodeType":"58","messageId":"59","endLine":6,"endColumn":14},{"ruleId":"56","severity":1,"message":"70","line":68,"column":10,"nodeType":"58","messageId":"59","endLine":68,"endColumn":16},{"ruleId":"56","severity":1,"message":"71","line":68,"column":18,"nodeType":"58","messageId":"59","endLine":68,"endColumn":27},{"ruleId":"56","severity":1,"message":"72","line":69,"column":10,"nodeType":"58","messageId":"59","endLine":69,"endColumn":15},{"ruleId":"56","severity":1,"message":"73","line":70,"column":9,"nodeType":"58","messageId":"59","endLine":70,"endColumn":21},{"ruleId":"56","severity":1,"message":"74","line":2,"column":50,"nodeType":"58","messageId":"59","endLine":2,"endColumn":55},{"ruleId":"56","severity":1,"message":"75","line":2,"column":78,"nodeType":"58","messageId":"59","endLine":2,"endColumn":88},{"ruleId":"56","severity":1,"message":"76","line":2,"column":101,"nodeType":"58","messageId":"59","endLine":2,"endColumn":110},{"ruleId":"56","severity":1,"message":"73","line":7,"column":9,"nodeType":"58","messageId":"59","endLine":7,"endColumn":21},{"ruleId":"56","severity":1,"message":"77","line":6,"column":8,"nodeType":"58","messageId":"59","endLine":6,"endColumn":20},{"ruleId":"56","severity":1,"message":"78","line":29,"column":6,"nodeType":"58","messageId":"59","endLine":29,"endColumn":11},"@typescript-eslint/no-unused-vars","'TabMenu' is defined but never used.","Identifier","unusedVar","'ThemeSettings' is defined but never used.","'GlobalSettings' is defined but never used.","no-native-reassign",["79"],"no-negated-in-lhs",["80"],"'ButtonGroup' is defined but never used.","'Container' is defined but never used.","'gStyles' is defined but never used.","'columns' is assigned a value but never used.","'status' is assigned a value but never used.","'setStatus' is assigned a value but never used.","'error' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'Input' is defined but never used.","'InputLabel' is defined but never used.","'InputBase' is defined but never used.","'ListItemIcon' is defined but never used.","'IItem' is defined but never used.","no-global-assign","no-unsafe-negation"]