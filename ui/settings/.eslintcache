[{"/home/projects/homie/drycat/ui/settings/src/pages/main/index.tsx":"1","/home/projects/homie/drycat/ui/settings/src/index.tsx":"2","/home/projects/homie/drycat/ui/settings/src/components/tab-menu/index.tsx":"3","/home/projects/homie/drycat/ui/settings/src/components/theme-settings/index.tsx":"4","/home/projects/homie/drycat/ui/settings/src/components/global-settings/index.tsx":"5","/home/projects/homie/drycat/ui/settings/src/components/theme-settings/random.tsx":"6","/home/projects/homie/drycat/ui/settings/src/components/theme-settings/folder.tsx":"7","/home/projects/homie/drycat/ui/settings/src/components/side-menu/index.tsx":"8","/home/projects/homie/drycat/ui/settings/src/ipc/ipc.tsx":"9"},{"size":809,"mtime":1608810656035,"results":"10","hashOfConfig":"11"},{"size":226,"mtime":1607702259681,"results":"12","hashOfConfig":"11"},{"size":1064,"mtime":1608283903115,"results":"13","hashOfConfig":"11"},{"size":636,"mtime":1608718994213,"results":"14","hashOfConfig":"11"},{"size":269,"mtime":1608719031589,"results":"15","hashOfConfig":"11"},{"size":6215,"mtime":1608718901071,"results":"16","hashOfConfig":"11"},{"size":1090,"mtime":1609260930529,"results":"17","hashOfConfig":"11"},{"size":2377,"mtime":1608798459025,"results":"18","hashOfConfig":"11"},{"size":748,"mtime":1609258641648,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"1ry7o4a",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"45"},"/home/projects/homie/drycat/ui/settings/src/pages/main/index.tsx",["46","47","48"],"import TabMenu from 'components/tab-menu';\nimport ThemeSettings, { menu as themeMenu } from 'components/theme-settings';\nimport GlobalSettings, { menu as globalMenu } from 'components/global-settings';\nimport SideMenu from 'components/side-menu';\nimport IPC from 'ipc';\n\n\n// import TabMenuArea from 'components/tab-menu/area';\nconst heck = () => setTimeout(() => {\n  console.log('send');\n  IPC.send('test', { params: ['heck', 'yeah'] });\n  heck();\n}, 1000)\n\n\nconst App = () => {\n  const items = [\n    globalMenu,\n    themeMenu,\n  ];\n  heck();\n  return (\n    <div>\n      <SideMenu items={items}/>\n      {/* <TabMenu active={1} items={[\n        { label: 'Global', element: <GlobalSettings/> },\n        { label: 'Theme', element: <ThemeSettings/> },\n      ]}\n      /> */}\n    </div >\n  );\n}\n\nexport default App;\n","/home/projects/homie/drycat/ui/settings/src/index.tsx",[],["49","50"],"/home/projects/homie/drycat/ui/settings/src/components/tab-menu/index.tsx",[],["51","52"],"/home/projects/homie/drycat/ui/settings/src/components/theme-settings/index.tsx",[],["53","54"],"/home/projects/homie/drycat/ui/settings/src/components/global-settings/index.tsx",[],"/home/projects/homie/drycat/ui/settings/src/components/theme-settings/random.tsx",["55","56","57","58","59","60","61","62"],"import { FormControl, FormGroup, FormLabel, FormControlLabel, Switch, TableContainer, Table, TableRow, TableHead, TableCell, TableBody, Paper, Checkbox, TextField, Input, ButtonGroup, Button, Container, FormHelperText, Box, Tooltip } from '@material-ui/core';\nimport { useState } from 'react';\nimport gStyles from 'global.module.scss';\nimport styles from './styles.module.scss';\n\nconst columns = [\n  { field: 'name', header: 'Theme Name' },\n  { field: 'wiehgt', header: 'Weight', type: 'number' },\n]\n\nconst data: { name: string, weight: number, choosed?: boolean, error?: string }[] = [\n  { name: \"default\", weight: 100 },\n  { name: \"dryCat\", weight: 50 },\n  { name: \"notChoosed\", weight: 0 },\n  { name: \"heck\", weight: 1 },\n];\n\nenum TOGGLE_ALL_STATUS {\n  EMPTY,\n  HALF,\n  CHECKED,\n}\n\nfunction RandomThemes() {\n\n  const [rows, setRows] = useState([...data]);\n  const [weight, setWeight] = useState(0);\n  const [weightError, setWeightError] = useState<string | undefined>();\n  const [toggleAllStatus, setToggleAllStatus] = useState(TOGGLE_ALL_STATUS.EMPTY);\n  const toggleAll = (checked: boolean) => {\n    for (let i = 0; i < data.length; i++) {\n      data[i].choosed = checked;\n    }\n    if (checked) setToggleAllStatus(TOGGLE_ALL_STATUS.CHECKED);\n    else setToggleAllStatus(TOGGLE_ALL_STATUS.EMPTY);\n    setRows([...data]);\n  }\n\n  const toggleOne = (i: number, checked: boolean) => {\n    data[i].choosed = checked;\n    const choosedCount = data.reduce<number>((count, { choosed }) => choosed === true ? count + 1 : count, 0);\n    if (choosedCount === 0) setToggleAllStatus(TOGGLE_ALL_STATUS.EMPTY);\n    else if (choosedCount === data.length) setToggleAllStatus(TOGGLE_ALL_STATUS.CHECKED);\n    else setToggleAllStatus(TOGGLE_ALL_STATUS.HALF);\n    setRows([...data]);\n  }\n\n  const setWeightToChoosed = () => {\n    console.log('newWeight', weight)\n    for (const theme of data) {\n      if (theme.choosed) theme.weight = weight;\n    }\n    console.log(data);\n    setRows([...data]);\n  }\n\n  const setErrorFor = (i: number, error?: string) => {\n    data[i].error = error;\n    setRows([...data]);\n  }\n\n  const changeWeight = (i: number, newWeight: number) => {\n    data[i].weight = newWeight;\n    data[i].error = undefined;\n    setRows([...data]);\n  }\n\n  const [status, setStatus] = useState(true);\n  const [error] = useState();\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    console.log(event);\n  };\n\n  return (\n    <div className={styles.random}>\n      <FormLabel component=\"legend\">Themes random</FormLabel>\n      <FormControl component=\"fieldset\" margin=\"normal\">\n        <FormGroup>\n          <FormControlLabel\n            control={<Switch color=\"primary\" />}\n            label=\"Enabled\"\n          // labelPlacement=\"start\"\n          />\n        </FormGroup>\n      </FormControl>\n      <Box className={styles.tableContainer}>\n        <TableContainer component={Paper} className={styles.table}>\n          <Table size=\"small\" aria-label=\"a dense table\" >\n            <TableHead>\n              <TableRow>\n                <TableCell align=\"left\" className={styles.checkbox}>\n                  <Checkbox\n                    color=\"primary\"\n                    onChange={(_, checked) => toggleAll(checked)}\n                    indeterminate={toggleAllStatus === TOGGLE_ALL_STATUS.HALF}\n                    checked={toggleAllStatus === TOGGLE_ALL_STATUS.CHECKED ? true : false}\n                  />\n                </TableCell>\n                <TableCell align=\"left\">Name</TableCell>\n                <TableCell size=\"small\" align=\"left\">Weight</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map(({ name, weight, choosed, error }, i) => (\n                <TableRow key={`table_row_${i}`}>\n                  <TableCell align=\"left\" className={styles.checkbox}>\n                    <Checkbox\n                      color=\"primary\"\n                      checked={!!choosed}\n                      onChange={(_, checked) => toggleOne(i, checked)}\n                    />\n                  </TableCell>\n                  <TableCell align=\"left\">{name}</TableCell>\n                  <TableCell size=\"small\" align=\"left\">\n                    <Tooltip open={!!error} title={error || ''}>\n                      <Input\n                        value={weight}\n                        error={!!error}\n                        onChange={({ target: { value } }) => {\n                          const newValue = Number(value);\n                          if (Number.isNaN(newValue)) setErrorFor(i, 'Only numbers allowed')\n                          else changeWeight(i, Number(value));\n                        }}\n                        color=\"primary\"\n                        inputProps={error ? { onBlur: () => setErrorFor(i) } : {}}\n                      // disableUnderline={true}\n                      // onChange={(e) => changeWeight(i, e)}\n                      />\n                    </Tooltip>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <FormControl variant=\"filled\">\n          <TextField\n            // defaultValue={path}\n            // onChange={handleChange}\n            error={!!weightError}\n            onChange={({ target: { value } }) => {\n              const newValue = Number(value);\n              if (Number.isNaN(newValue)) setWeightError('Only numbers allowed');\n              else setWeight(newValue);\n            }}\n            variant=\"filled\"\n            margin=\"normal\"\n            size=\"small\"\n            value={weight}\n            InputProps={{\n              onBlur: () => { if (weightError) setWeightError(undefined); },\n              endAdornment: <Button\n                disabled={(weightError !== undefined || toggleAllStatus === TOGGLE_ALL_STATUS.EMPTY)}\n                onClick={setWeightToChoosed}\n                size=\"small\"\n                variant=\"contained\"\n              >Set</Button>\n            }} />\n          <FormHelperText error={!!weightError}>Set entered integer (weight) to all choosed themes</FormHelperText>\n        </FormControl>\n      </Box>\n    </div>\n  );\n}\n\nexport default RandomThemes;\n","/home/projects/homie/drycat/ui/settings/src/components/theme-settings/folder.tsx",["63","64","65","66"],"/home/projects/homie/drycat/ui/settings/src/components/side-menu/index.tsx",["67","68"],"import React, { useState } from 'react';\nimport { Divider, ListSubheader, List, ListItem, Collapse, ListItemText } from '@material-ui/core';\nimport { ExpandLess, ExpandMore } from '@material-ui/icons';\nimport styles from './styles.module.scss';\nimport classnames from 'classnames';\n\ninterface IParent {\n  label: string;\n  subitems: IChild[];\n}\n\ninterface IEParent extends IParent {\n  opened: boolean;\n  active: boolean;\n}\n\ninterface IChild {\n  label: string;\n  element: React.ReactElement;\n}\n\ntype IItem = IChild | IParent;\n\n\n\ninterface IProps {\n  items: IParent[];\n}\n\nconst prepareItems = (items: IParent[]) => items.map<IEParent>((item) => ({\n  ...item,\n  opened: true,\n  active: false,\n}));\n\nconst SideMenu: React.FC<IProps> = ({ items: rawItems }) => {\n\n  const [panel, setPanel] = useState<React.ReactElement>();\n  const [items, setItems] = useState(prepareItems(rawItems));\n\n  const toggleOpened = (i: number) => {\n    items[i].opened = !items[i].opened;\n    setItems([...items]);\n  }\n\n  const parseChilds = (items: IChild[]) => items.map((item) => (\n    <ListItem\n      button\n      onClick={() => setPanel(item.element)}\n      className={classnames(styles.childItem, { [styles.active]: panel === item.element })}\n    >\n      {console.log(panel === item.element)}\n      <ListItemText primary={item.label} />\n    </ListItem>\n  ))\n\n  const parseParents = (items: IEParent[]) => items.reduce<React.ReactElement[]>((all, item, i) => {\n    all.push(\n      <ListItem\n        button\n        onClick={() => toggleOpened(i)}\n        className={styles.parentItem}\n      >\n        <ListItemText primary={item.label} />\n        {item.opened ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n    );\n    all.push(\n      <Collapse in={item.opened} timeout=\"auto\" unmountOnExit className={styles.childItemContainer}>\n        <List component=\"div\" disablePadding>\n          {parseChilds(item.subitems)}\n        </List>\n      </Collapse>\n    );\n    return all;\n  }, []);\n  console.log(panel);\n  return (\n    <div className={styles.menu}>\n      <List\n        component=\"li\"\n        aria-labelledby=\"nested-list-subheader\"\n        className={styles.itemContainer}\n      >\n        {parseParents(items)}\n      </List>\n      <Divider variant=\"fullWidth\" orientation=\"vertical\" />\n      <div className={styles.panel}>\n        {panel}\n      </div>\n    </div>\n  );\n}\n\nexport default SideMenu;\n",["69","70"],"/home/projects/homie/drycat/ui/settings/src/ipc/ipc.tsx",["71","72"],"import { IpcRenderer } from 'electron';\nimport { IpcEventData } from '../../../../src/ui/settings.ui';\n\nexport const IpcService = new class IpcService {\n    private _ipc?: IpcRenderer;\n    get ipc() {\n        if (!this._ipc) {\n            if (!window || !window.process || !window.require) {\n                throw new Error(`Unable to require renderer process`);\n            }\n            this._ipc = window.require('electron').ipcRenderer;\n        }\n        return this._ipc;\n    }\n\n\n    public send<T extends (...args: any[]) => any>(channel: string, event: string, params: Parameters<T>): Promise<ReturnType<T>> {\n        return new Promise(resolve => {\n            // ipcRenderer?.once(\n                \n            // );\n        });\n    }\n\n}\n\n",{"ruleId":"73","severity":1,"message":"74","line":1,"column":8,"nodeType":"75","messageId":"76","endLine":1,"endColumn":15},{"ruleId":"73","severity":1,"message":"77","line":2,"column":8,"nodeType":"75","messageId":"76","endLine":2,"endColumn":21},{"ruleId":"73","severity":1,"message":"78","line":3,"column":8,"nodeType":"75","messageId":"76","endLine":3,"endColumn":22},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"79","replacedBy":"83"},{"ruleId":"81","replacedBy":"84"},{"ruleId":"79","replacedBy":"85"},{"ruleId":"81","replacedBy":"86"},{"ruleId":"73","severity":1,"message":"87","line":1,"column":172,"nodeType":"75","messageId":"76","endLine":1,"endColumn":183},{"ruleId":"73","severity":1,"message":"88","line":1,"column":193,"nodeType":"75","messageId":"76","endLine":1,"endColumn":202},{"ruleId":"73","severity":1,"message":"89","line":3,"column":8,"nodeType":"75","messageId":"76","endLine":3,"endColumn":15},{"ruleId":"73","severity":1,"message":"90","line":6,"column":7,"nodeType":"75","messageId":"76","endLine":6,"endColumn":14},{"ruleId":"73","severity":1,"message":"91","line":68,"column":10,"nodeType":"75","messageId":"76","endLine":68,"endColumn":16},{"ruleId":"73","severity":1,"message":"92","line":68,"column":18,"nodeType":"75","messageId":"76","endLine":68,"endColumn":27},{"ruleId":"73","severity":1,"message":"93","line":69,"column":10,"nodeType":"75","messageId":"76","endLine":69,"endColumn":15},{"ruleId":"73","severity":1,"message":"94","line":70,"column":9,"nodeType":"75","messageId":"76","endLine":70,"endColumn":21},{"ruleId":"73","severity":1,"message":"95","line":2,"column":50,"nodeType":"75","messageId":"76","endLine":2,"endColumn":55},{"ruleId":"73","severity":1,"message":"96","line":2,"column":78,"nodeType":"75","messageId":"76","endLine":2,"endColumn":88},{"ruleId":"73","severity":1,"message":"97","line":2,"column":101,"nodeType":"75","messageId":"76","endLine":2,"endColumn":110},{"ruleId":"73","severity":1,"message":"94","line":7,"column":9,"nodeType":"75","messageId":"76","endLine":7,"endColumn":21},{"ruleId":"73","severity":1,"message":"98","line":2,"column":19,"nodeType":"75","messageId":"76","endLine":2,"endColumn":32},{"ruleId":"73","severity":1,"message":"99","line":22,"column":6,"nodeType":"75","messageId":"76","endLine":22,"endColumn":11},{"ruleId":"79","replacedBy":"100"},{"ruleId":"81","replacedBy":"101"},{"ruleId":"73","severity":1,"message":"102","line":2,"column":10,"nodeType":"75","messageId":"76","endLine":2,"endColumn":22},{"ruleId":"103","severity":1,"message":"104","line":4,"column":27,"nodeType":"105","messageId":"106","endLine":25,"endColumn":2,"fix":"107"},"@typescript-eslint/no-unused-vars","'TabMenu' is defined but never used.","Identifier","unusedVar","'ThemeSettings' is defined but never used.","'GlobalSettings' is defined but never used.","no-native-reassign",["108"],"no-negated-in-lhs",["109"],["108"],["109"],["108"],["109"],"'ButtonGroup' is defined but never used.","'Container' is defined but never used.","'gStyles' is defined but never used.","'columns' is assigned a value but never used.","'status' is assigned a value but never used.","'setStatus' is assigned a value but never used.","'error' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'Input' is defined but never used.","'InputLabel' is defined but never used.","'InputBase' is defined but never used.","'ListSubheader' is defined but never used.","'IItem' is defined but never used.",["108"],["109"],"'IpcEventData' is defined but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"110","text":"111"},"no-global-assign","no-unsafe-negation",[746,746],"()"]